{"id":"16990f61-580e-4c0b-9891-a64b34a3451d","zed":"context","version":"0.4.0","text":"\n\n\nWarum kann ich keine werte in meiner mongoDB speichern wenn ich sie doch auslesen kann? Es ist kein berechtigungsproblem\n\nWenn du in der Lage bist, Daten aus deiner MongoDB zu lesen, aber keine Daten speichern kannst, obwohl es kein Berechtigungsproblem ist, könnten mehrere andere Ursachen dafür verantwortlich sein. Hier sind einige mögliche Gründe und Lösungsansätze:\n\n1. **Verbindungsprobleme**:\n   - Stelle sicher, dass deine Anwendung korrekt mit der MongoDB verbunden ist. Manchmal kann es sein, dass die Verbindung für Leseoperationen funktioniert, aber bei Schreiboperationen fehlschlägt.\n\n2. **Fehlerhafte Schreiboperationen**:\n   - Überprüfe den Code, der für das Schreiben in die Datenbank verantwortlich ist. Es könnte sein, dass dort ein Fehler vorliegt. Stelle sicher, dass die Daten, die du speichern möchtest, das richtige Format haben und alle erforderlichen Felder enthalten.\n\n3. **Datenbank- und Collection-Namen**:\n   - Vergewissere dich, dass du in die richtige Datenbank und Collection schreibst. Ein Tippfehler im Namen der Datenbank oder Collection kann dazu führen, dass die Schreiboperation fehlschlägt.\n\n4. **Indexe und Constraints**:\n   - Überprüfe, ob es Indexe oder Constraints gibt, die das Einfügen von Daten verhindern könnten. Beispielsweise könnte ein Unique-Index verhindern, dass du doppelte Einträge speicherst.\n\n5. **Speicherplatz**:\n   - Stelle sicher, dass auf dem Server, auf dem MongoDB läuft, genügend Speicherplatz vorhanden ist. Wenn der Speicherplatz knapp ist, kann dies zu Problemen beim Speichern von Daten führen.\n\n6. **Fehlermeldungen und Logs**:\n   - Überprüfe die Fehlermeldungen und Logs deiner Anwendung sowie die MongoDB-Logs. Diese können wertvolle Hinweise darauf geben, warum die Schreiboperationen fehlschlagen.\n\n7. **Transaktionen**:\n   - Wenn du Transaktionen verwendest, stelle sicher, dass diese korrekt implementiert sind und keine Fehler verursachen.\n\n8. **MongoDB-Version und Treiber**:\n   - Stelle sicher, dass du eine kompatible Version des MongoDB-Treibers verwendest, die zu deiner MongoDB-Server-Version passt.\n\nHier ist ein einfaches Beispiel, wie du Daten in MongoDB einfügen kannst, um sicherzustellen, dass der grundlegende Schreibvorgang funktioniert:\n\n```javascript\nconst { MongoClient } = require('mongodb');\n\nasync function main() {\n    const uri = \"your_mongodb_connection_string\";\n    const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\n    try {\n        await client.connect();\n        const database = client.db('testdb');\n        const collection = database.collection('testcollection');\n\n        const doc = { name: \"John Doe\", age: 30, city: \"Berlin\" };\n        const result = await collection.insertOne(doc);\n\n        console.log(`New document inserted with the following id: ${result.insertedId}`);\n    } catch (err) {\n        console.error(err);\n    } finally {\n        await client.close();\n    }\n}\n\nmain().catch(console.error);\n```\n\nWenn du weiterhin Probleme hast, gib bitte mehr Details zu deinem Setup und den genauen Fehlermeldungen, die du erhältst, damit ich gezielter helfen kann.\n      Wenn ich meine restapi aus der docker compose nehme und sie separat ausführe funktioniert es aber. Sie ist in springboot geschrieben\nWenn deine Spring Boot REST API außerhalb von Docker Compose funktioniert, aber innerhalb von Docker Compose nicht, dann könnte das Problem mit der Docker-Konfiguration zusammenhängen. Hier sind einige mögliche Ursachen und Lösungsansätze:\n\n1. **Netzwerk-Konfiguration**:\n   - Stelle sicher, dass die Netzwerkeinstellungen in deiner `docker-compose.yml` korrekt sind. Standardmäßig erstellt Docker Compose ein eigenes Netzwerk für die Container. Überprüfe, ob die Container miteinander kommunizieren können.\n\n2. **Service-Namen und Umgebungsvariablen**:\n   - In Docker Compose kommunizieren Container über die Service-Namen, die in der `docker-compose.yml` definiert sind. Stelle sicher, dass deine Spring Boot Anwendung die richtige URL für die MongoDB verwendet. Anstatt `localhost`, solltest du den Service-Namen verwenden, z.B. `mongodb`.\n\n3. **Abhängigkeiten und Startreihenfolge**:\n   - Es könnte sein, dass die MongoDB noch nicht bereit ist, wenn deine Spring Boot Anwendung startet. Du kannst `depends_on` in der `docker-compose.yml` verwenden, um sicherzustellen, dass MongoDB zuerst startet.\n\nHier ist ein Beispiel für eine `docker-compose.yml`, die eine Spring Boot Anwendung und MongoDB enthält:\n\n```yaml\nversion: '3.8'\n\nservices:\n  mongodb:\n    image: mongo:latest\n    container_name: mongodb\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongo-data:/data/db\n\n  springboot-app:\n    image: your_springboot_image\n    container_name: springboot-app\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/yourdatabase\n    depends_on:\n      - mongodb\n\nvolumes:\n  mongo-data:\n```\n\nIn diesem Beispiel:\n- Der MongoDB-Service wird zuerst gestartet.\n- Die Spring Boot Anwendung verwendet die Umgebungsvariable `SPRING_DATA_MONGODB_URI`, um sich mit MongoDB zu verbinden. Der Hostname `mongodb` entspricht dem Service-Namen in der `docker-compose.yml`.\n\n4. **Logs und Fehlermeldungen**:\n   - Überprüfe die Logs der Spring Boot Anwendung und MongoDB innerhalb von Docker Compose. Diese können wertvolle Hinweise darauf geben, warum die Verbindung fehlschlägt. Du kannst die Logs mit folgendem Befehl anzeigen:\n     ```sh\n     docker-compose logs springboot-app\n     docker-compose logs mongodb\n     ```\n\n5. **Docker Netzwerk**:\n   - Stelle sicher, dass beide Container im selben Netzwerk sind. Docker Compose sollte dies automatisch handhaben, aber es ist gut, dies zu überprüfen.\n\n6. **Dockerfile**:\n   - Überprüfe dein Dockerfile für die Spring Boot Anwendung, um sicherzustellen, dass alle notwendigen Abhängigkeiten und Konfigurationen korrekt sind.\n\nWenn du weiterhin Probleme hast, poste bitte deine `docker-compose.yml` und relevante Teile deines Spring Boot Codes, damit ich gezielter helfen kann.\nMeine compose:\nversion: \"3.1\"\n\nservices:\n  springboot-restapi:\n    build: .\n    container_name: springboot-restapi\n    ports:\n      - \"8080:8080\"\n    environment:\n      MONGODB_USERNAME: ${MONGODB_USERNAME}\n      MONGODB_PASSWORD: ${MONGODB_PASSWORD}\n      MONGODB_DATABASE: ${MONGODB_DATABASE}\n      MONGODB_HOST: mongodb #using the servide name in this case\n      MONGODB_PORT: ${MONGODB_PORT}\n    networks:\n      - app-network\n  mongodb:\n    image: mongo\n    container_name: mongodb\n    restart: always\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}\n    networks:\n      - app-network\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - \"8081:8081\"\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}\n      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}\n      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:${MONGODB_PORT}/\n      ME_CONFIG_BASICAUTH: false\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n\nDeine `docker-compose.yml` Datei sieht grundsätzlich gut aus, aber es gibt einige Punkte, die du überprüfen und anpassen könntest, um sicherzustellen, dass alles korrekt funktioniert:\n\n1. **Umgebungsvariablen**:\n   - Stelle sicher, dass die Umgebungsvariablen (`MONGODB_USERNAME`, `MONGODB_PASSWORD`, `MONGODB_DATABASE`, `MONGODB_PORT`) korrekt in deiner Umgebung gesetzt sind, bevor du `docker-compose up` ausführst. Du kannst dies in einer `.env` Datei definieren und Docker Compose wird diese automatisch laden.\n\n2. **Spring Boot Konfiguration**:\n   - Überprüfe, ob deine Spring Boot Anwendung die Umgebungsvariablen korrekt verwendet, um die MongoDB-Verbindung zu konfigurieren. In der `application.properties` oder `application.yml` Datei solltest du sicherstellen, dass die Verbindungseinstellungen korrekt sind.\n\nHier ist ein Beispiel für eine `.env` Datei:\n```env\nMONGODB_USERNAME=root\nMONGODB_PASSWORD=example\nMONGODB_DATABASE=mydatabase\nMONGODB_PORT=27017\n```\n\nUnd hier ist ein Beispiel für die `application.properties` Datei in deiner Spring Boot Anwendung:\n```properties\nspring.data.mongodb.uri=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}\n```\n\n3. **Docker Compose Netzwerke**:\n   - Deine Netzwerkkonfiguration sieht korrekt aus, aber stelle sicher, dass alle Container im selben Netzwerk sind, was in deinem Fall `app-network` ist.\n\n4. **Fehlermeldungen und Logs**:\n   - Überprüfe die Logs der Spring Boot Anwendung und MongoDB innerhalb von Docker Compose, um spezifische Fehlermeldungen zu identifizieren. Du kannst die Logs mit folgendem Befehl anzeigen:\n     ```sh\n     docker-compose logs springboot-restapi\n     docker-compose logs mongodb\n     ```\n\n5. **Abhängigkeiten und Startreihenfolge**:\n   - Es könnte hilfreich sein, `depends_on` zu verwenden, um sicherzustellen, dass MongoDB vor der Spring Boot Anwendung startet. Beachte jedoch, dass `depends_on` nur die Startreihenfolge beeinflusst und nicht sicherstellt, dass MongoDB vollständig bereit ist, bevor die Spring Boot Anwendung startet.\n\nHier ist eine angepasste Version deiner `docker-compose.yml` Datei:\n```yaml\nversion: \"3.1\"\n\nservices:\n  springboot-restapi:\n    build: .\n    container_name: springboot-restapi\n    ports:\n      - \"8080:8080\"\n    environment:\n      MONGODB_USERNAME: ${MONGODB_USERNAME}\n      MONGODB_PASSWORD: ${MONGODB_PASSWORD}\n      MONGODB_DATABASE: ${MONGODB_DATABASE}\n      MONGODB_HOST: mongodb\n      MONGODB_PORT: ${MONGODB_PORT}\n    networks:\n      - app-network\n    depends_on:\n      - mongodb\n\n  mongodb:\n    image: mongo\n    container_name: mongodb\n    restart: always\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}\n    networks:\n      - app-network\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - \"8081:8081\"\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}\n      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}\n      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:${MONGODB_PORT}/\n      ME_CONFIG_BASICAUTH: false\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n```\n\nStelle sicher, dass du die `.env` Datei im selben Verzeichnis wie deine `docker-compose.yml` Datei hast und dass die Umgebungsvariablen korrekt gesetzt sind.\n\nFühre dann `docker-compose up --build` aus, um die Container neu zu erstellen und zu starten. Überprüfe die Logs, um sicherzustellen, dass die Verbindung zur MongoDB erfolgreich hergestellt wird.\nMuss ich noch irgendetwas im springboot projekt anpassen?\nJa, du musst sicherstellen, dass deine Spring Boot Anwendung korrekt konfiguriert ist, um die Umgebungsvariablen zu verwenden und eine Verbindung zur MongoDB herzustellen. Hier sind die Schritte, die du befolgen solltest:\n\n1. **Spring Boot Konfiguration**:\n   - Stelle sicher, dass deine `application.properties` oder `application.yml` Datei die Umgebungsvariablen verwendet, um die MongoDB-Verbindung zu konfigurieren.\n\nHier ist ein Beispiel für die `application.properties` Datei:\n```properties\nspring.data.mongodb.uri=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}\n```\n\nOder, wenn du `application.yml` verwendest:\n```yaml\nspring:\n  data:\n    mongodb:\n      uri: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}\n```\n\n2. **Umgebungsvariablen in Docker Compose**:\n   - Stelle sicher, dass die Umgebungsvariablen in deiner `docker-compose.yml` Datei korrekt gesetzt sind und dass sie mit den Variablen in deiner Spring Boot Konfiguration übereinstimmen.\n\n3. **Spring Boot Anwendung**:\n   - Deine Spring Boot Anwendung sollte die Umgebungsvariablen automatisch erkennen und verwenden, wenn sie korrekt in der `application.properties` oder `application.yml` Datei definiert sind.\n\n4. **Überprüfen der Verbindung**:\n   - Überprüfe die Logs deiner Spring Boot Anwendung, um sicherzustellen, dass die Verbindung zur MongoDB erfolgreich hergestellt wird. Du kannst die Logs mit folgendem Befehl anzeigen:\n     ```sh\n     docker-compose logs springboot-restapi\n     ```\n\n5. **Fehlermeldungen und Debugging**:\n   - Wenn die Verbindung fehlschlägt, überprüfe die Fehlermeldungen in den Logs. Häufige Probleme könnten falsche Umgebungsvariablen, Netzwerkprobleme oder Authentifizierungsfehler sein.\n\nHier ist ein vollständiges Beispiel für eine `docker-compose.yml` Datei und die entsprechenden Spring Boot Konfigurationsdateien:\n\n**docker-compose.yml**:\n```yaml\nversion: \"3.1\"\n\nservices:\n  springboot-restapi:\n    build: .\n    container_name: springboot-restapi\n    ports:\n      - \"8080:8080\"\n    environment:\n      MONGODB_USERNAME: ${MONGODB_USERNAME}\n      MONGODB_PASSWORD: ${MONGODB_PASSWORD}\n      MONGODB_DATABASE: ${MONGODB_DATABASE}\n      MONGODB_HOST: mongodb\n      MONGODB_PORT: ${MONGODB_PORT}\n    networks:\n      - app-network\n    depends_on:\n      - mongodb\n\n  mongodb:\n    image: mongo\n    container_name: mongodb\n    restart: always\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}\n    networks:\n      - app-network\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - \"8081:8081\"\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}\n      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}\n      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:${MONGODB_PORT}/\n      ME_CONFIG_BASICAUTH: false\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n```\n\n**application.properties**:\n```properties\nspring.data.mongodb.uri=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}\n```\n\n**.env** (im selben Verzeichnis wie `docker-compose.yml`):\n```env\nMONGODB_USERNAME=root\nMONGODB_PASSWORD=example\nMONGODB_DATABASE=mydatabase\nMONGODB_PORT=27017\n```\n\nStelle sicher, dass du die `.env` Datei im selben Verzeichnis wie deine `docker-compose.yml` Datei hast und dass die Umgebungsvariablen korrekt gesetzt sind.\n\nFühre dann `docker-compose up --build` aus, um die Container neu zu erstellen und zu starten. Überprüfe die Logs, um sicherzustellen, dass die Verbindung zur MongoDB erfolgreich hergestellt wird.\nIch habe alles so gemacht wie du gesagt hast aber es funktioniert immer noch nicht:\nspring.application.name=service\n\n# debug=true\n# logging.level.org.springframework.security=DEBUG\n\nspringdoc.api-docs.path=/api-docs\n\nspring.data.mongodb.uri=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}\nspring.data.mongodb.host=${MONGODB_HOST}\nspring.data.mongodb.port=${MONGODB_PORT}\nspring.data.mongodb.database=${MONGODB_DATABASE}\nspring.data.mongodb.username=${MONGODB_USERNAME}\nspring.data.mongodb.password=${MONGODB_PASSWORD}\nspring.data.mongodb.authentication-database=admin\n\n# support reading from .env file\nspring.config.import=optional:file:.env[.properties]\n\nEs scheint, dass du bereits viele der richtigen Schritte unternommen hast. Lass uns einige zusätzliche Überprüfungen und Anpassungen vornehmen, um sicherzustellen, dass alles korrekt konfiguriert ist.\n\n1. **Überprüfe die Umgebungsvariablen**:\n   - Stelle sicher, dass die Umgebungsvariablen korrekt gesetzt sind und dass sie in der Spring Boot Anwendung verfügbar sind. Du kannst dies überprüfen, indem du die Umgebungsvariablen in den Logs ausgibst.\n\n2. **Verbindung zur MongoDB**:\n   - Überprüfe, ob die MongoDB-Instanz korrekt läuft und erreichbar ist. Du kannst dies tun, indem du dich von einem anderen Container oder direkt vom Host aus mit der MongoDB verbindest.\n\n3. **Spring Boot Logs**:\n   - Überprüfe die Logs der Spring Boot Anwendung, um spezifische Fehlermeldungen zu identifizieren. Diese können wertvolle Hinweise darauf geben, warum die Verbindung fehlschlägt.\n\n4. **Docker Compose Netzwerke**:\n   - Stelle sicher, dass beide Container im selben Netzwerk sind und dass die Netzwerkkonfiguration korrekt ist.\n\nHier sind einige zusätzliche Schritte, die du unternehmen kannst:\n\n### 1. Überprüfe die Umgebungsvariablen\nFüge in deiner Spring Boot Anwendung eine Methode hinzu, um die Umgebungsvariablen zu überprüfen:\n\n```java\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EnvVariablesChecker implements CommandLineRunner {\n\n    @Value(\"${MONGODB_USERNAME}\")\n    private String mongoUsername;\n\n    @Value(\"${MONGODB_PASSWORD}\")\n    private String mongoPassword;\n\n    @Value(\"${MONGODB_HOST}\")\n    private String mongoHost;\n\n    @Value(\"${MONGODB_PORT}\")\n    private String mongoPort;\n\n    @Value(\"${MONGODB_DATABASE}\")\n    private String mongoDatabase;\n\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"MONGODB_USERNAME: \" + mongoUsername);\n        System.out.println(\"MONGODB_PASSWORD: \" + mongoPassword);\n        System.out.println(\"MONGODB_HOST: \" + mongoHost);\n        System.out.println(\"MONGODB_PORT: \" + mongoPort);\n        System.out.println(\"MONGODB_DATABASE: \" + mongoDatabase);\n    }\n}\n```\n\n### 2. Überprüfe die Verbindung zur MongoDB\nVersuche, dich von einem anderen Container oder direkt vom Host aus mit der MongoDB zu verbinden, um sicherzustellen, dass sie erreichbar ist:\n\n```sh\ndocker exec -it mongodb mongo -u root -p example --authenticationDatabase admin\n```\n\n### 3. Überprüfe die Spring Boot Logs\nÜberprüfe die Logs der Spring Boot Anwendung, um spezifische Fehlermeldungen zu identifizieren:\n\n```sh\ndocker-compose logs springboot-restapi\n```\n\n### 4. Überprüfe die Netzwerkkonfiguration\nStelle sicher, dass beide Container im selben Netzwerk sind und dass die Netzwerkkonfiguration korrekt ist. Deine `docker-compose.yml` Datei sieht korrekt aus, aber du kannst die Netzwerkeinstellungen überprüfen:\n\n```sh\ndocker network inspect app-network\n```\n\n### Beispiel für eine vollständige `docker-compose.yml` Datei und `application.properties` Datei\n\n**docker-compose.yml**:\n```yaml\nversion: \"3.1\"\n\nservices:\n  springboot-restapi:\n    build: .\n    container_name: springboot-restapi\n    ports:\n      - \"8080:8080\"\n    environment:\n      MONGODB_USERNAME: ${MONGODB_USERNAME}\n      MONGODB_PASSWORD: ${MONGODB_PASSWORD}\n      MONGODB_DATABASE: ${MONGODB_DATABASE}\n      MONGODB_HOST: mongodb\n      MONGODB_PORT: ${MONGODB_PORT}\n    networks:\n      - app-network\n    depends_on:\n      - mongodb\n\n  mongodb:\n    image: mongo\n    container_name: mongodb\n    restart: always\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}\n    networks:\n      - app-network\n\n  mongo-express:\n    image: mongo-express\n    restart: always\n    ports:\n      - \"8081:8081\"\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}\n      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}\n      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:${MONGODB_PORT}/\n      ME_CONFIG_BASICAUTH: false\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n```\n\n**application.properties**:\n```properties\nspring.application.name=service\n\nspringdoc.api-docs.path=/api-docs\n\nspring.data.mongodb.uri=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}\nspring.data.mongodb.host=${MONGODB_HOST}\nspring.data.mongodb.port=${MONGODB_PORT}\nspring.data.mongodb.database=${MONGODB_DATABASE}\nspring.data.mongodb.username=${MONGODB_USERNAME}\nspring.data.mongodb.password=${MONGODB_PASSWORD}\nspring.data.mongodb.authentication-database=admin\n\nspring.config.import=optional:file:.env[.properties]\n```\n\n**.env** (im selben Verzeichnis wie `docker-compose.yml`):\n```env\nMONGODB_USERNAME=root\nMONGODB_PASSWORD=example\nMONGODB_DATABASE=mydatabase\nMONGODB_PORT=27017\n```\n\nFühre dann `docker-compose up --build` aus, um die Container neu zu erstellen und zu starten. Überprüfe die Logs, um sicherzustellen, dass die Verbindung zur MongoDB erfolgreich hergestellt wird.\nDas sind meine logs\n.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | 2025-02-18T12:51:05.002Z  INFO 1 --- [service] [           main] o.s.v.b.OptionalValidatorFactoryBean     : Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.\nspringboot-restapi  | 2025-02-18T12:51:05.238Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\nspringboot-restapi  | 2025-02-18T12:51:05.248Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Started Fmc003RestApiApplication in 2.469 seconds (process running for 3.031)\nspringboot-restapi  | 2025-02-18T12:51:35.058Z  INFO 1 --- [service] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T12:51:35.059Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T12:51:35.060Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\nspringboot-restapi  | 2025-02-18T12:51:35.400Z  INFO 1 --- [service] [nio-8080-exec-5] o.springdoc.api.AbstractOpenApiResource  : Init duration for springdoc-openapi is: 183 ms\nspringboot-restapi  | idsAndNames[]\nspringboot-restapi  | 2025-02-18T12:52:09.735Z  INFO 1 --- [service] [ionShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete\nspringboot-restapi  | 2025-02-18T12:52:09.741Z  INFO 1 --- [service] [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete\nspringboot-restapi  |\nspringboot-restapi  |   .   ____          _            __ _ _\nspringboot-restapi  |  /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\nspringboot-restapi  | ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\nspringboot-restapi  |  \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\nspringboot-restapi  |   '  |____| .__|_| |_|_| |_\\__, | / / / /\nspringboot-restapi  |  =========|_|==============|___/=/_/_/_/\nspringboot-restapi  |\nspringboot-restapi  |  :: Spring Boot ::                (v3.4.1)\nspringboot-restapi  |\nspringboot-restapi  | 2025-02-18T12:52:11.906Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Starting Fmc003RestApiApplication v0.0.1-SNAPSHOT using Java 22.0.2 with PID 1 (/app.jar started by root in /service)\nspringboot-restapi  | 2025-02-18T12:52:11.910Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : No active profile set, falling back to 1 default profile: \"default\"\nspringboot-restapi  | 2025-02-18T12:52:12.638Z  INFO 1 --- [service] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.\nspringboot-restapi  | 2025-02-18T12:52:12.685Z  INFO 1 --- [service] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 41 ms. Found 2 MongoDB repository interfaces.\nspringboot-restapi  | 2025-02-18T12:52:13.132Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)\nspringboot-restapi  | 2025-02-18T12:52:13.142Z  INFO 1 --- [service] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\nspringboot-restapi  | 2025-02-18T12:52:13.143Z  INFO 1 --- [service] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.34]\nspringboot-restapi  | 2025-02-18T12:52:13.167Z  INFO 1 --- [service] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\nspringboot-restapi  | 2025-02-18T12:52:13.168Z  INFO 1 --- [service] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1148 ms\nspringboot-restapi  | 2025-02-18T12:52:13.340Z  INFO 1 --- [service] [           main] org.mongodb.driver.client                : MongoClient with metadata {\"driver\": {\"name\": \"mongo-java-driver|sync|spring-boot\", \"version\": \"5.2.1\"}, \"os\": {\"type\": \"Linux\", \"name\": \"Linux\", \"architecture\": \"aarch64\", \"version\": \"6.8.0-39-generic\"}, \"platform\": \"Java/Eclipse Adoptium/22.0.2+9\", \"env\": {\"container\": {\"runtime\": \"docker\"}}} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=MongoCredential{mechanism=null, userName='youser', source='admin', password=<hidden>, mechanismProperties=<hidden>}, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@2abc8034, com.mongodb.Jep395RecordCodecProvider@467b0f6e, com.mongodb.KotlinCodecProvider@474179fa]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[mongodb:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}\nspringboot-restapi  | 2025-02-18T12:52:13.361Z  INFO 1 --- [service] [}-mongodb:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=mongodb:27017, type=STANDALONE, cryptd=false, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=25, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=23900051, minRoundTripTimeNanos=0}\nspringboot-restapi  | java.io.FileNotFoundException: src/main/resources/teltonikaDongleDataDumby.txt (No such file or directory)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open0(Native Method)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open(Unknown Source)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.<init>(Unknown Source)\nspringboot-restapi  | \tat java.base/java.util.Scanner.<init>(Unknown Source)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoDongleByFile.fetchDongleModel(IoDongleByFile.java:49)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoDongleByFile.<init>(IoDongleByFile.java:34)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)\nspringboot-restapi  | \tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1333)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | An error occurred.\nspringboot-restapi  | java.io.FileNotFoundException: src/main/resources/teltonikaIdAndName.txt (No such file or directory)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open0(Native Method)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open(Unknown Source)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.<init>(Unknown Source)\nspringboot-restapi  | \tat java.base/java.util.Scanner.<init>(Unknown Source)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoWikiByFile.fetchIdsAndNames(IoWikiByFile.java:50)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoWikiByFile.<init>(IoWikiByFile.java:20)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)\nspringboot-restapi  | \tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1333)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | 2025-02-18T12:52:13.725Z  INFO 1 --- [service] [           main] o.s.v.b.OptionalValidatorFactoryBean     : Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.\nspringboot-restapi  | 2025-02-18T12:52:14.002Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\nspringboot-restapi  | 2025-02-18T12:52:14.011Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Started Fmc003RestApiApplication in 2.666 seconds (process running for 3.26)\nspringboot-restapi  | 2025-02-18T12:52:16.479Z  INFO 1 --- [service] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T12:52:16.479Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T12:52:16.480Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\nspringboot-restapi  | 2025-02-18T12:52:16.806Z  INFO 1 --- [service] [nio-8080-exec-5] o.springdoc.api.AbstractOpenApiResource  : Init duration for springdoc-openapi is: 189 ms\nspringboot-restapi  | idsAndNames[]\nDanke für die Bereitstellung der Logs. Es scheint, dass es zwei Hauptprobleme gibt:\n\n1. **Fehlende Dateien**:\n   - Deine Anwendung versucht, auf Dateien zuzugreifen, die nicht vorhanden sind (`teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt`). Dies verursacht `FileNotFoundException` Fehler.\n\n2. **Bean Validation Provider**:\n   - Es gibt eine Warnung, dass kein Jakarta Bean Validation Provider gefunden wurde. Dies ist jedoch nur eine Warnung und sollte die Hauptfunktionalität nicht beeinträchtigen.\n\n### Lösung für fehlende Dateien\n\nStelle sicher, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources` deiner Spring Boot Anwendung vorhanden sind. Wenn diese Dateien nicht vorhanden sind, füge sie hinzu oder passe den Code an, um mit dem Fehlen dieser Dateien umzugehen.\n\n### Beispiel für das Hinzufügen der Dateien\n\n1. **Erstelle die Dateien**:\n   - Erstelle die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources`.\n\n2. **Inhalt der Dateien**:\n   - Füge den notwendigen Inhalt in diese Dateien ein. Wenn du nicht sicher bist, was in diesen Dateien stehen soll, überprüfe den Code, der auf diese Dateien zugreift, um herauszufinden, welche Daten erwartet werden.\n\n### Beispiel für den Code, der auf die Dateien zugreift\n\nHier ist ein Beispiel, wie du den Code anpassen kannst, um mit dem Fehlen der Dateien umzugehen:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class IoDongleByFile {\n\n    public void fetchDongleModel() {\n        try {\n            File file = new File(\"src/main/resources/teltonikaDongleDataDumby.txt\");\n            Scanner scanner = new Scanner(file);\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n            scanner.close();\n        } catch (FileNotFoundException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Lösung für Bean Validation Provider\n\nFüge einen Bean Validation Provider wie Hibernate Validator zu deinem Projekt hinzu. Dies kann durch Hinzufügen der entsprechenden Abhängigkeit in deiner `pom.xml` Datei erfolgen.\n\n### Beispiel für die `pom.xml` Datei\n\nFüge die folgende Abhängigkeit zu deiner `pom.xml` Datei hinzu:\n\n```xml\n<dependency>\n    <groupId>org.hibernate.validator</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>8.0.0.Final</version>\n</dependency>\n<dependency>\n    <groupId>jakarta.validation</groupId>\n    <artifactId>jakarta.validation-api</artifactId>\n    <version>3.0.2</version>\n</dependency>\n```\n\n### Zusammenfassung\n\n1. **Stelle sicher, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources` vorhanden sind**.\n2. **Füge einen Bean Validation Provider wie Hibernate Validator zu deinem Projekt hinzu**.\n\nNachdem du diese Änderungen vorgenommen hast, baue und starte deine Anwendung erneut:\n\n```sh\ndocker-compose up --build\n```\n\nÜberprüfe die Logs erneut, um sicherzustellen, dass die Fehler behoben sind und die Anwendung korrekt funktioniert.\nKriege ich immernoch eine file not found exception, wenn ich die Dateien hinzufüge?\n\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | 2025-02-18T14:18:31.449Z  INFO 1 --- [service] [           main] o.s.v.b.OptionalValidatorFactoryBean     : Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.\nspringboot-restapi  | 2025-02-18T14:18:31.698Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\nspringboot-restapi  | 2025-02-18T14:18:31.709Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Started Fmc003RestApiApplication in 2.567 seconds (process running for 3.161)\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:40.576+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.3:40796\",\"uuid\":{\"uuid\":{\"$uuid\":\"08a8b0db-bc45-416b-834c-54554e2b97c6\"}},\"connectionId\":6,\"connectionCount\":5}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:40.577+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn6\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.3:40796\",\"client\":\"conn6\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"nodejs\",\"version\":\"4.13.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"linux\",\"architecture\":\"arm64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Node.js v18.20.3, LE (unified)|Node.js v18.20.3, LE (unified)\"}}}\nspringboot-restapi  | 2025-02-18T14:18:49.311Z  INFO 1 --- [service] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T14:18:49.312Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T14:18:49.313Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\nspringboot-restapi  | 2025-02-18T14:18:49.647Z  INFO 1 --- [service] [nio-8080-exec-9] o.springdoc.api.AbstractOpenApiResource  : Init duration for springdoc-openapi is: 173 ms\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:52.209+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.4:35246\",\"uuid\":{\"uuid\":{\"$uuid\":\"bf73e0b3-a146-4398-a5d8-7be73cc3cc3f\"}},\"connectionId\":7,\"connectionCount\":6}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:52.215+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn7\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.4:35246\",\"client\":\"conn7\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"mongo-java-driver|sync|spring-boot\",\"version\":\"5.2.1\"},\"os\":{\"type\":\"Linux\",\"name\":\"Linux\",\"architecture\":\"aarch64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Java/Eclipse Adoptium/22.0.2+9\",\"env\":{\"container\":{\"runtime\":\"docker\"}}}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:52.215+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":6788604, \"ctx\":\"conn7\",\"msg\":\"Auth metrics report\",\"attr\":{\"metric\":\"acquireUser\",\"micros\":0}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:52.270+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":5286306, \"ctx\":\"conn7\",\"msg\":\"Successfully authenticated\",\"attr\":{\"client\":\"172.19.0.4:35246\",\"isSpeculative\":true,\"isClusterMember\":false,\"mechanism\":\"SCRAM-SHA-256\",\"user\":\"youser\",\"db\":\"admin\",\"result\":0,\"metrics\":{\"conversation_duration\":{\"micros\":54505,\"summary\":{\"0\":{\"step\":1,\"step_total\":2,\"duration_micros\":44},\"1\":{\"step\":2,\"step_total\":2,\"duration_micros\":20}}}},\"extraInfo\":{}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:18:52.289+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":6788700, \"ctx\":\"conn7\",\"msg\":\"Received first command on ingress connection since session start or auth handshake\",\"attr\":{\"elapsedMillis\":19}}\nspringboot-restapi  | idsAndNames[]\nmongo-express-1     | GET / 200 72.792 ms - 9259\nmongo-express-1     | GET /public/index-56afe067afbbbde795be.min.js 304 1.580 ms - -\nmongo-express-1     | GET /public/css/bootstrap-theme.min.css 304 1.921 ms - -\nmongo-express-1     | GET /public/css/style.css 304 2.258 ms - -\nmongo-express-1     | GET /public/vendor-93f5fc3ae20e0dfd68cb.min.js 304 2.723 ms - -\nmongo-express-1     | GET /public/css/bootstrap.min.css 200 3.970 ms - 121457\nmongo-express-1     | GET /public/img/mongo-express-logo.png 304 0.374 ms - -\nmongo-express-1     | GET /public/img/gears.gif 200 0.939 ms - 50281\nmongo-express-1     | GET / 200 60.593 ms - 9259\nmongo-express-1     | GET /public/vendor-93f5fc3ae20e0dfd68cb.min.js 304 2.803 ms - -\nmongo-express-1     | GET /public/css/style.css 304 3.389 ms - -\nmongo-express-1     | GET /public/css/bootstrap.min.css 304 5.396 ms - -\nmongo-express-1     | GET /public/css/bootstrap-theme.min.css 304 5.735 ms - -\nmongo-express-1     | GET /public/index-56afe067afbbbde795be.min.js 304 2.562 ms - -\nmongo-express-1     | GET /public/img/mongo-express-logo.png 304 0.581 ms - -\nmongo-express-1     | GET /public/img/gears.gif 304 0.422 ms - -\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:19:29.394+00:00\"},\"s\":\"I\",  \"c\":\"WTCHKPT\",  \"id\":22430,   \"ctx\":\"Checkpointer\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888369,\"ts_usec\":394670,\"thread\":\"1:0xe7b48980e6c0\",\"session_name\":\"WT_SESSION.checkpoint\",\"category\":\"WT_VERB_CHECKPOINT_PROGRESS\",\"category_id\":7,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"saving checkpoint snapshot min: 4, snapshot max: 4 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 80\"}}}\nGracefully stopping... (press Ctrl+C again to force)\n[+] Stopping 3/3\n ✔ Container springboot-restapi               Stopped                                    0.1s\n ✔ Container fmc003_rest-api-mongo-express-1  Stopped                                    0.1s\n ✔ Container mongodb                          Stopped                                    0.1s\nlucyhuhn@xenya52laptop fmc003_rest-api % ç\nlucyhuhn@xenya52laptop fmc003_rest-api % sudo docker-compose up\nWARN[0000] /Users/lucyhuhn/Documents/Development/java/fmc003_rest-api/docker-compose.yaml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion\nWARN[0000] Found orphan containers ([fmc003_rest-api-restapi-1 fmc003_rest-api-service-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.\n[+] Running 3/3\n ✔ Container mongodb                          Created                                    0.0s\n ✔ Container fmc003_rest-api-mongo-express-1  Created                                    0.0s\n ✔ Container springboot-restapi               Created                                    0.0s\nAttaching to mongo-express-1, mongodb, springboot-restapi\nmongo-express-1     | Waiting for mongodb:27017...\nmongo-express-1     | /docker-entrypoint.sh: connect: Connection refused\nmongo-express-1     | /docker-entrypoint.sh: line 15: /dev/tcp/mongodb/27017: Connection refused\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.882+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":23285,   \"ctx\":\"main\",\"msg\":\"Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.882+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":5945603, \"ctx\":\"main\",\"msg\":\"Multi threading initialized\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.882+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":4648601, \"ctx\":\"main\",\"msg\":\"Implicit TCP FastOpen unavailable. If TCP FastOpen is required, set at least one of the related parameters\",\"attr\":{\"relatedParameters\":[\"tcpFastOpenServer\",\"tcpFastOpenClient\",\"tcpFastOpenQueueSize\"]}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.883+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":4915701, \"ctx\":\"main\",\"msg\":\"Initialized wire specification\",\"attr\":{\"spec\":{\"incomingExternalClient\":{\"minWireVersion\":0,\"maxWireVersion\":25},\"incomingInternalClient\":{\"minWireVersion\":0,\"maxWireVersion\":25},\"outgoing\":{\"minWireVersion\":6,\"maxWireVersion\":25},\"isInternalClient\":true}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.883+00:00\"},\"s\":\"I\",  \"c\":\"TENANT_M\", \"id\":7091600, \"ctx\":\"main\",\"msg\":\"Starting TenantMigrationAccessBlockerRegistry\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.883+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":4615611, \"ctx\":\"initandlisten\",\"msg\":\"MongoDB starting\",\"attr\":{\"pid\":1,\"port\":27017,\"dbPath\":\"/data/db\",\"architecture\":\"64-bit\",\"host\":\"6e5407a211c4\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.883+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":23403,   \"ctx\":\"initandlisten\",\"msg\":\"Build Info\",\"attr\":{\"buildInfo\":{\"version\":\"8.0.0\",\"gitVersion\":\"d7cd03b239ac39a3c7d63f7145e91aca36f93db6\",\"openSSLVersion\":\"OpenSSL 3.0.13 30 Jan 2024\",\"modules\":[],\"allocator\":\"tcmalloc-google\",\"environment\":{\"distmod\":\"ubuntu2404\",\"distarch\":\"aarch64\",\"target_arch\":\"aarch64\"}}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.883+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":51765,   \"ctx\":\"initandlisten\",\"msg\":\"Operating System\",\"attr\":{\"os\":{\"name\":\"Ubuntu\",\"version\":\"24.04\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.883+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":21951,   \"ctx\":\"initandlisten\",\"msg\":\"Options set by command line\",\"attr\":{\"options\":{\"net\":{\"bindIp\":\"*\"},\"security\":{\"authorization\":\"enabled\"}}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.884+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22270,   \"ctx\":\"initandlisten\",\"msg\":\"Storage engine to use detected by data files\",\"attr\":{\"dbpath\":\"/data/db\",\"storageEngine\":\"wiredTiger\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.884+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22297,   \"ctx\":\"initandlisten\",\"msg\":\"Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\",\"tags\":[\"startupWarnings\"]}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:17.884+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22315,   \"ctx\":\"initandlisten\",\"msg\":\"Opening WiredTiger\",\"attr\":{\"config\":\"create,cache_size=466M,session_max=33000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,remove=true,path=journal,compressor=snappy),builtin_extension_config=(zstd=(compression_level=6)),file_manager=(close_idle_time=600,close_scan_interval=10,close_handle_minimum=2000),statistics_log=(wait=0),json_output=(error,message),verbose=[recovery_progress:1,checkpoint_progress:1,compact_progress:1,backup:0,checkpoint:0,compact:0,evict:0,history_store:0,recovery:0,rts:0,salvage:0,tiered:0,timestamp:0,transaction:0,verify:0,log:0],prefetch=(available=true,default=false),\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.591+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":591624,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Recovering log 7 through 8\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.612+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":612515,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Recovering log 8 through 8\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.641+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":641391,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Main recovery loop: starting at 7/6272 to 8/256\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.677+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":677908,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Recovering log 7 through 8\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.700+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":700697,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Recovering log 8 through 8\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.727+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":727125,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"recovery log replay has successfully finished and ran for 135 milliseconds\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.727+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":727222,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Set global recovery timestamp: (0, 0)\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.727+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":727234,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"Set global oldest timestamp: (0, 0)\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.728+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":728357,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"recovery rollback to stable has successfully finished and ran for 0 milliseconds\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.735+00:00\"},\"s\":\"I\",  \"c\":\"WTCHKPT\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":735853,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"WT_SESSION.checkpoint\",\"category\":\"WT_VERB_CHECKPOINT_PROGRESS\",\"category_id\":7,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"saving checkpoint snapshot min: 1, snapshot max: 1 snapshot count: 0, oldest timestamp: (0, 0) , meta checkpoint timestamp: (0, 0) base write gen: 91\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.745+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":745958,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"recovery checkpoint has successfully finished and ran for 13 milliseconds\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.746+00:00\"},\"s\":\"I\",  \"c\":\"WTRECOV\",  \"id\":22430,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger message\",\"attr\":{\"message\":{\"ts_sec\":1739888598,\"ts_usec\":746033,\"thread\":\"1:0xf92a661d4040\",\"session_name\":\"txn-recover\",\"category\":\"WT_VERB_RECOVERY_PROGRESS\",\"category_id\":34,\"verbose_level\":\"DEBUG_1\",\"verbose_level_id\":1,\"msg\":\"recovery was completed successfully and took 154ms, including 135ms for the log replay, 0ms for the rollback to stable, and 13ms for the checkpoint.\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.748+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":4795906, \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger opened\",\"attr\":{\"durationMillis\":864}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.748+00:00\"},\"s\":\"I\",  \"c\":\"RECOVERY\", \"id\":23987,   \"ctx\":\"initandlisten\",\"msg\":\"WiredTiger recoveryTimestamp\",\"attr\":{\"recoveryTimestamp\":{\"$timestamp\":{\"t\":0,\"i\":0}}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.755+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":8640300, \"ctx\":\"initandlisten\",\"msg\":\"For customers running the tcmalloc-google memory allocator, we suggest setting the contents of sysfsFile to 'always'\",\"attr\":{\"sysfsFile\":\"/sys/kernel/mm/transparent_hugepage/enabled\",\"currentValue\":\"madvise\"},\"tags\":[\"startupWarnings\"]}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.755+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":8640301, \"ctx\":\"initandlisten\",\"msg\":\"For customers running the updated tcmalloc-google memory allocator, we suggest setting the contents of sysfsFile to 'defer+madvise'\",\"attr\":{\"sysfsFile\":\"/sys/kernel/mm/transparent_hugepage/defrag\",\"currentValue\":\"madvise\"},\"tags\":[\"startupWarnings\"]}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.755+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":8640302, \"ctx\":\"initandlisten\",\"msg\":\"We suggest setting the contents of sysfsFile to 0.\",\"attr\":{\"sysfsFile\":\"/sys/kernel/mm/transparent_hugepage/khugepaged/max_ptes_none\",\"currentValue\":511},\"tags\":[\"startupWarnings\"]}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.755+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":8718500, \"ctx\":\"initandlisten\",\"msg\":\"Your system has glibc support for rseq built in, which is not yet supported by tcmalloc-google and has critical performance implications. Please set the environment variable GLIBC_TUNABLES=glibc.pthread.rseq=0\",\"tags\":[\"startupWarnings\"]}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.759+00:00\"},\"s\":\"W\",  \"c\":\"NETWORK\",  \"id\":5123300, \"ctx\":\"initandlisten\",\"msg\":\"vm.max_map_count is too low\",\"attr\":{\"currentValue\":1048576,\"recommendedMinimum\":1677720,\"maxConns\":838860},\"tags\":[\"startupWarnings\"]}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.762+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":4915702, \"ctx\":\"initandlisten\",\"msg\":\"Updated wire specification\",\"attr\":{\"oldSpec\":{\"incomingExternalClient\":{\"minWireVersion\":0,\"maxWireVersion\":25},\"incomingInternalClient\":{\"minWireVersion\":0,\"maxWireVersion\":25},\"outgoing\":{\"minWireVersion\":6,\"maxWireVersion\":25},\"isInternalClient\":true},\"newSpec\":{\"incomingExternalClient\":{\"minWireVersion\":0,\"maxWireVersion\":25},\"incomingInternalClient\":{\"minWireVersion\":25,\"maxWireVersion\":25},\"outgoing\":{\"minWireVersion\":25,\"maxWireVersion\":25},\"isInternalClient\":true}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.762+00:00\"},\"s\":\"I\",  \"c\":\"REPL\",     \"id\":5853300, \"ctx\":\"initandlisten\",\"msg\":\"current featureCompatibilityVersion value\",\"attr\":{\"featureCompatibilityVersion\":\"8.0\",\"context\":\"startup\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.771+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":5071100, \"ctx\":\"initandlisten\",\"msg\":\"Clearing temp directory\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.773+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":6608200, \"ctx\":\"initandlisten\",\"msg\":\"Initializing cluster server parameters from disk\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.775+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":20536,   \"ctx\":\"initandlisten\",\"msg\":\"Flow Control is enabled on this deployment\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.775+00:00\"},\"s\":\"I\",  \"c\":\"FTDC\",     \"id\":20625,   \"ctx\":\"initandlisten\",\"msg\":\"Initializing full-time diagnostic data capture\",\"attr\":{\"dataDirectory\":\"/data/db/diagnostic.data\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.777+00:00\"},\"s\":\"I\",  \"c\":\"REPL\",     \"id\":6015317, \"ctx\":\"initandlisten\",\"msg\":\"Setting new configuration state\",\"attr\":{\"newState\":\"ConfigReplicationDisabled\",\"oldState\":\"ConfigPreStart\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.777+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":22262,   \"ctx\":\"initandlisten\",\"msg\":\"Timestamp monitor starting\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.777+00:00\"},\"s\":\"I\",  \"c\":\"STORAGE\",  \"id\":7333401, \"ctx\":\"initandlisten\",\"msg\":\"Starting the DiskSpaceMonitor\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.779+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":23015,   \"ctx\":\"listener\",\"msg\":\"Listening on\",\"attr\":{\"address\":\"/tmp/mongodb-27017.sock\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.779+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":23015,   \"ctx\":\"listener\",\"msg\":\"Listening on\",\"attr\":{\"address\":\"0.0.0.0:27017\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.779+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":23016,   \"ctx\":\"listener\",\"msg\":\"Waiting for connections\",\"attr\":{\"port\":27017,\"ssl\":\"off\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.779+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":8423403, \"ctx\":\"initandlisten\",\"msg\":\"mongod startup complete\",\"attr\":{\"Summary of time elapsed\":{\"Startup from clean shutdown?\":true,\"Statistics\":{\"Set up periodic runner\":\"0 ms\",\"Set up online certificate status protocol manager\":\"0 ms\",\"Transport layer setup\":\"0 ms\",\"Run initial syncer crash recovery\":\"0 ms\",\"Create storage engine lock file in the data directory\":\"0 ms\",\"Get metadata describing storage engine\":\"0 ms\",\"Validate options in metadata against current startup options\":\"0 ms\",\"Create storage engine\":\"866 ms\",\"Write current PID to file\":\"0 ms\",\"Initialize FCV before rebuilding indexes\":\"2 ms\",\"Drop abandoned idents and get back indexes that need to be rebuilt or builds that need to be restarted\":\"8 ms\",\"Rebuild indexes for collections\":\"0 ms\",\"Load cluster parameters from disk for a standalone\":\"2 ms\",\"Build user and roles graph\":\"0 ms\",\"Verify indexes for admin.system.users collection\":\"0 ms\",\"Set up the background thread pool responsible for waiting for opTimes to be majority committed\":\"0 ms\",\"Start up the replication coordinator\":\"1 ms\",\"Ensure the change stream collections on startup contain consistent data\":\"0 ms\",\"Write startup options to the audit log\":\"0 ms\",\"Start transport layer\":\"0 ms\",\"_initAndListen total elapsed time\":\"896 ms\"}}}}\nmongo-express-1     | Tue Feb 18 14:23:18 UTC 2025 retrying to connect to mongodb:27017 (2/10)\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.878+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.3:44734\",\"uuid\":{\"uuid\":{\"$uuid\":\"39941e48-e3e5-433b-9fc2-5e8dba63dd49\"}},\"connectionId\":1,\"connectionCount\":1}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:18.878+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22944,   \"ctx\":\"conn1\",\"msg\":\"Connection ended\",\"attr\":{\"remote\":\"172.19.0.3:44734\",\"uuid\":{\"uuid\":{\"$uuid\":\"39941e48-e3e5-433b-9fc2-5e8dba63dd49\"}},\"connectionId\":1,\"connectionCount\":0}}\nspringboot-restapi  |\nspringboot-restapi  |   .   ____          _            __ _ _\nspringboot-restapi  |  /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\nspringboot-restapi  | ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\nspringboot-restapi  |  \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\nspringboot-restapi  |   '  |____| .__|_| |_|_| |_\\__, | / / / /\nspringboot-restapi  |  =========|_|==============|___/=/_/_/_/\nspringboot-restapi  |\nspringboot-restapi  |  :: Spring Boot ::                (v3.4.1)\nspringboot-restapi  |\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.002+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":636300,  \"ctx\":\"ftdc\",\"msg\":\"Use of deprecated server parameter name\",\"attr\":{\"deprecatedName\":\"internalQueryCacheSize\",\"canonicalName\":\"internalQueryCacheMaxEntriesPerCollection\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.002+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":636300,  \"ctx\":\"ftdc\",\"msg\":\"Use of deprecated server parameter name\",\"attr\":{\"deprecatedName\":\"oplogSamplingLogIntervalSeconds\",\"canonicalName\":\"collectionSamplingLogIntervalSeconds\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.002+00:00\"},\"s\":\"W\",  \"c\":\"NETWORK\",  \"id\":23803,   \"ctx\":\"ftdc\",\"msg\":\"Use of deprecated server parameter 'sslMode', please use 'tlsMode' instead.\"}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.002+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":636300,  \"ctx\":\"ftdc\",\"msg\":\"Use of deprecated server parameter name\",\"attr\":{\"deprecatedName\":\"wiredTigerConcurrentReadTransactions\",\"canonicalName\":\"storageEngineConcurrentReadTransactions\"}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.002+00:00\"},\"s\":\"W\",  \"c\":\"CONTROL\",  \"id\":636300,  \"ctx\":\"ftdc\",\"msg\":\"Use of deprecated server parameter name\",\"attr\":{\"deprecatedName\":\"wiredTigerConcurrentWriteTransactions\",\"canonicalName\":\"storageEngineConcurrentWriteTransactions\"}}\nspringboot-restapi  | 2025-02-18T14:23:19.073Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Starting Fmc003RestApiApplication v0.0.1-SNAPSHOT using Java 22.0.2 with PID 1 (/app.jar started by root in /service)\nspringboot-restapi  | 2025-02-18T14:23:19.079Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : No active profile set, falling back to 1 default profile: \"default\"\nmongo-express-1     | No custom config.js found, loading config.default.js\nmongo-express-1     | Welcome to mongo-express 1.0.2\nmongo-express-1     | ------------------------\nmongo-express-1     |\nmongo-express-1     |\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.435+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.3:44738\",\"uuid\":{\"uuid\":{\"$uuid\":\"b69ef4e8-1cca-487a-9fae-92cf1b70c187\"}},\"connectionId\":2,\"connectionCount\":1}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.439+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn2\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.3:44738\",\"client\":\"conn2\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"nodejs\",\"version\":\"4.13.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"linux\",\"architecture\":\"arm64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Node.js v18.20.3, LE (unified)|Node.js v18.20.3, LE (unified)\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.445+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.3:44754\",\"uuid\":{\"uuid\":{\"$uuid\":\"78ec020c-6ee8-48fa-897d-f1415581206b\"}},\"connectionId\":3,\"connectionCount\":2}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.446+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn3\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.3:44754\",\"client\":\"conn3\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"nodejs\",\"version\":\"4.13.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"linux\",\"architecture\":\"arm64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Node.js v18.20.3, LE (unified)|Node.js v18.20.3, LE (unified)\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.448+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":6788604, \"ctx\":\"conn3\",\"msg\":\"Auth metrics report\",\"attr\":{\"metric\":\"acquireUser\",\"micros\":0}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.457+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":5286306, \"ctx\":\"conn3\",\"msg\":\"Successfully authenticated\",\"attr\":{\"client\":\"172.19.0.3:44754\",\"isSpeculative\":true,\"isClusterMember\":false,\"mechanism\":\"SCRAM-SHA-256\",\"user\":\"youser\",\"db\":\"admin\",\"result\":0,\"metrics\":{\"conversation_duration\":{\"micros\":9106,\"summary\":{\"0\":{\"step\":1,\"step_total\":2,\"duration_micros\":40},\"1\":{\"step\":2,\"step_total\":2,\"duration_micros\":26}}}},\"extraInfo\":{}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:19.459+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":6788700, \"ctx\":\"conn3\",\"msg\":\"Received first command on ingress connection since session start or auth handshake\",\"attr\":{\"elapsedMillis\":2}}\nmongo-express-1     | Mongo Express server listening at http://0.0.0.0:8081\nmongo-express-1     | Server is open to allow connections from anyone (0.0.0.0)\nmongo-express-1     | Basic authentication is disabled. It is recommended to set the useBasicAuth to true in the config.js.\nspringboot-restapi  | 2025-02-18T14:23:19.779Z  INFO 1 --- [service] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.\nspringboot-restapi  | 2025-02-18T14:23:19.825Z  INFO 1 --- [service] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 42 ms. Found 2 MongoDB repository interfaces.\nspringboot-restapi  | 2025-02-18T14:23:20.291Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)\nspringboot-restapi  | 2025-02-18T14:23:20.299Z  INFO 1 --- [service] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\nspringboot-restapi  | 2025-02-18T14:23:20.300Z  INFO 1 --- [service] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.34]\nspringboot-restapi  | 2025-02-18T14:23:20.321Z  INFO 1 --- [service] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\nspringboot-restapi  | 2025-02-18T14:23:20.322Z  INFO 1 --- [service] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1138 ms\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:20.489+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.4:36252\",\"uuid\":{\"uuid\":{\"$uuid\":\"f8f585b2-7cea-4553-9e5c-685d956eb688\"}},\"connectionId\":4,\"connectionCount\":3}}\nspringboot-restapi  | 2025-02-18T14:23:20.498Z  INFO 1 --- [service] [           main] org.mongodb.driver.client                : MongoClient with metadata {\"driver\": {\"name\": \"mongo-java-driver|sync|spring-boot\", \"version\": \"5.2.1\"}, \"os\": {\"type\": \"Linux\", \"name\": \"Linux\", \"architecture\": \"aarch64\", \"version\": \"6.8.0-39-generic\"}, \"platform\": \"Java/Eclipse Adoptium/22.0.2+9\", \"env\": {\"container\": {\"runtime\": \"docker\"}}} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=MongoCredential{mechanism=null, userName='youser', source='admin', password=<hidden>, mechanismProperties=<hidden>}, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@546394ed, com.mongodb.Jep395RecordCodecProvider@664212ab, com.mongodb.KotlinCodecProvider@2693c618]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[mongodb:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:20.500+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn4\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.4:36252\",\"client\":\"conn4\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"mongo-java-driver|sync|spring-boot\",\"version\":\"5.2.1\"},\"os\":{\"type\":\"Linux\",\"name\":\"Linux\",\"architecture\":\"aarch64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Java/Eclipse Adoptium/22.0.2+9\",\"env\":{\"container\":{\"runtime\":\"docker\"}}}}}\nspringboot-restapi  | 2025-02-18T14:23:20.523Z  INFO 1 --- [service] [}-mongodb:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=mongodb:27017, type=STANDALONE, cryptd=false, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=25, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=30448370, minRoundTripTimeNanos=0}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:20.525+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.4:36256\",\"uuid\":{\"uuid\":{\"$uuid\":\"8f71e7f3-482d-4660-9e3a-4c5a33814e68\"}},\"connectionId\":5,\"connectionCount\":4}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:20.526+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn5\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.4:36256\",\"client\":\"conn5\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"mongo-java-driver|sync|spring-boot\",\"version\":\"5.2.1\"},\"os\":{\"type\":\"Linux\",\"name\":\"Linux\",\"architecture\":\"aarch64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Java/Eclipse Adoptium/22.0.2+9\",\"env\":{\"container\":{\"runtime\":\"docker\"}}}}}\nspringboot-restapi  | java.io.FileNotFoundException: src/main/resources/teltonikaDongleDataDumby.txt (No such file or directory)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open0(Native Method)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open(Unknown Source)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.<init>(Unknown Source)\nspringboot-restapi  | \tat java.base/java.util.Scanner.<init>(Unknown Source)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoDongleByFile.fetchDongleModel(IoDongleByFile.java:49)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoDongleByFile.<init>(IoDongleByFile.java:34)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)\nspringboot-restapi  | \tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1333)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | An error occurred.\nspringboot-restapi  | java.io.FileNotFoundException: src/main/resources/teltonikaIdAndName.txt (No such file or directory)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open0(Native Method)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open(Unknown Source)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.<init>(Unknown Source)\nspringboot-restapi  | \tat java.base/java.util.Scanner.<init>(Unknown Source)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoWikiByFile.fetchIdsAndNames(IoWikiByFile.java:50)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoWikiByFile.<init>(IoWikiByFile.java:20)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)\nspringboot-restapi  | \tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1333)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | 2025-02-18T14:23:20.923Z  INFO 1 --- [service] [           main] o.s.v.b.OptionalValidatorFactoryBean     : Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.\nspringboot-restapi  | 2025-02-18T14:23:21.181Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\nspringboot-restapi  | 2025-02-18T14:23:21.191Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Started Fmc003RestApiApplication in 2.673 seconds (process running for 3.244)\nspringboot-restapi  | 2025-02-18T14:23:23.321Z  INFO 1 --- [service] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T14:23:23.322Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T14:23:23.323Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\nspringboot-restapi  | 2025-02-18T14:23:23.649Z  INFO 1 --- [service] [nio-8080-exec-4] o.springdoc.api.AbstractOpenApiResource  : Init duration for springdoc-openapi is: 182 ms\nspringboot-restapi  | idsAndNames[]\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.768+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.4:42270\",\"uuid\":{\"uuid\":{\"$uuid\":\"7e6840b1-2a54-4390-8689-ae3a1067be1c\"}},\"connectionId\":6,\"connectionCount\":5}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.772+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn6\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.4:42270\",\"client\":\"conn6\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"mongo-java-driver|sync|spring-boot\",\"version\":\"5.2.1\"},\"os\":{\"type\":\"Linux\",\"name\":\"Linux\",\"architecture\":\"aarch64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Java/Eclipse Adoptium/22.0.2+9\",\"env\":{\"container\":{\"runtime\":\"docker\"}}}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.772+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":6788604, \"ctx\":\"conn6\",\"msg\":\"Auth metrics report\",\"attr\":{\"metric\":\"acquireUser\",\"micros\":0}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.835+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":5286306, \"ctx\":\"conn6\",\"msg\":\"Successfully authenticated\",\"attr\":{\"client\":\"172.19.0.4:42270\",\"isSpeculative\":true,\"isClusterMember\":false,\"mechanism\":\"SCRAM-SHA-256\",\"user\":\"youser\",\"db\":\"admin\",\"result\":0,\"metrics\":{\"conversation_duration\":{\"micros\":63229,\"summary\":{\"0\":{\"step\":1,\"step_total\":2,\"duration_micros\":30},\"1\":{\"step\":2,\"step_total\":2,\"duration_micros\":20}}}},\"extraInfo\":{}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.845+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":6788700, \"ctx\":\"conn6\",\"msg\":\"Received first command on ingress connection since session start or auth handshake\",\"attr\":{\"elapsedMillis\":9}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.946+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.3:46382\",\"uuid\":{\"uuid\":{\"$uuid\":\"beff1439-5d1c-4017-a2ca-40a0f7724606\"}},\"connectionId\":7,\"connectionCount\":6}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T14:23:29.947+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn7\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.3:46382\",\"client\":\"conn7\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"nodejs\",\"version\":\"4.13.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"linux\",\"architecture\":\"arm64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Node.js v18.20.3, LE (unified)|Node.js v18.20.3, LE (unified)\"}}}\nmongo-express-1     | GET / 200 75.138 ms - 9259\nmongo-express-1     | GET /public/css/bootstrap.min.css 304 2.499 ms - -\nmongo-express-1     | GET /public/css/bootstrap-theme.min.css 304 1.956 ms - -\nmongo-express-1     | GET /public/vendor-93f5fc3ae20e0dfd68cb.min.js 304 2.542 ms - -\nmongo-express-1     | GET /public/css/style.css 304 2.703 ms - -\nmongo-express-1     | GET /public/index-56afe067afbbbde795be.min.js 304 0.851 ms - -\nmongo-express-1     | GET /public/img/mongo-express-logo.png 304 0.681 ms - -\nmongo-express-1     | GET /public/img/gears.gif 304 0.323 ms - -\nspringboot-restapi  | Dongle List:\nmongo-express-1     | GET / 200 62.672 ms - 9259\nmongo-express-1     | GET /public/vendor-93f5fc3ae20e0dfd68cb.min.js 304 0.853 ms - -\nmongo-express-1     | GET /public/css/bootstrap-theme.min.css 304 1.288 ms - -\nmongo-express-1     | GET /public/index-56afe067afbbbde795be.min.js 304 1.200 ms - -\nmongo-express-1     | GET /public/css/style.css 304 2.154 ms - -\nmongo-express-1     | GET /public/css/bootstrap.min.css 200 3.303 ms - 121457\nmongo-express-1     | GET /public/img/mongo-express-logo.png 304 0.441 ms - -\nmongo-express-1     | GET /public/img/gears.gif 304 0.375 ms - -\nEs scheint, dass die `FileNotFoundException` weiterhin auftritt, obwohl die Dateien hinzugefügt wurden. Dies könnte daran liegen, dass der Pfad zu den Dateien in der Docker-Umgebung nicht korrekt ist. In Docker-Containern kann der relative Pfad `src/main/resources` anders interpretiert werden als in deiner lokalen Entwicklungsumgebung.\n\n### Lösung: Verwende den Klassenpfad, um auf Ressourcen zuzugreifen\n\nAnstatt den relativen Pfad `src/main/resources` zu verwenden, solltest du den Klassenpfad verwenden, um auf die Ressourcen zuzugreifen. Dies stellt sicher, dass die Dateien korrekt gefunden werden, unabhängig davon, ob die Anwendung lokal oder in einem Docker-Container ausgeführt wird.\n\nHier ist ein Beispiel, wie du den Code anpassen kannst, um Dateien vom Klassenpfad zu laden:\n\n```java\nimport java.io.InputStream;\nimport java.util.Scanner;\n\npublic class IoDongleByFile {\n\n    public void fetchDongleModel() {\n        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"teltonikaDongleDataDumby.txt\");\n             Scanner scanner = new Scanner(inputStream)) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```\n\nUnd für die andere Datei:\n\n```java\nimport java.io.InputStream;\nimport java.util.Scanner;\n\npublic class IoWikiByFile {\n\n    public void fetchIdsAndNames() {\n        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"teltonikaIdAndName.txt\");\n             Scanner scanner = new Scanner(inputStream)) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Sicherstellen, dass die Dateien im Klassenpfad vorhanden sind\n\nStelle sicher, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources` deiner Spring Boot Anwendung vorhanden sind. Diese Dateien werden dann beim Bauen des Docker-Images in das Klassenpfad-Verzeichnis `BOOT-INF/classes` im JAR gepackt.\n\n### Dockerfile überprüfen\n\nStelle sicher, dass dein Dockerfile korrekt ist und die Anwendung baut und startet. Hier ist ein Beispiel für ein Dockerfile:\n\n```Dockerfile\nFROM openjdk:17-jdk-slim\nVOLUME /tmp\nCOPY target/your-application.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n```\n\n### Zusammenfassung\n\n1. **Passe den Code an, um Dateien vom Klassenpfad zu laden**.\n2. **Stelle sicher, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources` vorhanden sind**.\n3. **Überprüfe dein Dockerfile, um sicherzustellen, dass die Anwendung korrekt gebaut und gestartet wird**.\n\nNachdem du diese Änderungen vorgenommen hast, baue und starte deine Anwendung erneut:\n\n```sh\ndocker-compose up --build\n```\n\nÜberprüfe die Logs erneut, um sicherzustellen, dass die Fehler behoben sind und die Anwendung korrekt funktioniert.\nFROM maven:3.9.8-eclipse-temurin-22-jammy\nWORKDIR /service\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY ./src ./src\nCOPY ./application.properties ./src/main/resources/application.properties\nRUN mvn clean install -Dmaven.test.skip=true\n\nFROM eclipse-temurin:22-jre-alpine\nWORKDIR /service\nCOPY --from=0 /service/target/fmc003_rest-api-0.0.1-SNAPSHOT.jar /app.jar\n# TODO remove this later and make the file optional\nCOPY --from=0 /service/src/main/resources/teltonikaDongleDataDumby.txt /src/main/resources/teltonikaDongleDataDumby.txt\nCOPY --from=0 /service/src/main/resources/teltonikaIdAndName.txt /src/main/resources/teltonikaIdAndName.txt\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\nEXPOSE 8080\n\n\nUnd das ist mein path:\nsrc/main/resources/teltonikaDongleDataDumby.txt\nDanke für die Bereitstellung deines Dockerfiles und der Pfadangaben. Es scheint, dass du die Dateien korrekt kopierst, aber der Zugriff auf die Dateien im Docker-Container könnte immer noch problematisch sein, wenn du relative Pfade verwendest.\n\n### Lösung: Verwende den Klassenpfad, um auf Ressourcen zuzugreifen\n\nWie bereits erwähnt, ist es am besten, den Klassenpfad zu verwenden, um auf Ressourcen zuzugreifen. Dies stellt sicher, dass die Dateien korrekt gefunden werden, unabhängig davon, ob die Anwendung lokal oder in einem Docker-Container ausgeführt wird.\n\nHier ist ein Beispiel, wie du den Code anpassen kannst, um Dateien vom Klassenpfad zu laden:\n\n```java\nimport java.io.InputStream;\nimport java.util.Scanner;\n\npublic class IoDongleByFile {\n\n    public void fetchDongleModel() {\n        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"teltonikaDongleDataDumby.txt\");\n             Scanner scanner = new Scanner(inputStream)) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```\n\nUnd für die andere Datei:\n\n```java\nimport java.io.InputStream;\nimport java.util.Scanner;\n\npublic class IoWikiByFile {\n\n    public void fetchIdsAndNames() {\n        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"teltonikaIdAndName.txt\");\n             Scanner scanner = new Scanner(inputStream)) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Dockerfile überprüfen\n\nStelle sicher, dass dein Dockerfile korrekt ist und die Anwendung baut und startet. Hier ist ein Beispiel für ein Dockerfile:\n\n```Dockerfile\nFROM maven:3.9.8-eclipse-temurin-22-jammy AS build\nWORKDIR /service\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY ./src ./src\nCOPY ./application.properties ./src/main/resources/application.properties\nRUN mvn clean install -Dmaven.test.skip=true\n\nFROM eclipse-temurin:22-jre-alpine\nWORKDIR /service\nCOPY --from=build /service/target/fmc003_rest-api-0.0.1-SNAPSHOT.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\nEXPOSE 8080\n```\n\n### Zusammenfassung\n\n1. **Passe den Code an, um Dateien vom Klassenpfad zu laden**.\n2. **Stelle sicher, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources` vorhanden sind**.\n3. **Überprüfe dein Dockerfile, um sicherzustellen, dass die Anwendung korrekt gebaut und gestartet wird**.\n\nNachdem du diese Änderungen vorgenommen hast, baue und starte deine Anwendung erneut:\n\n```sh\ndocker-compose up --build\n```\n\nÜberprüfe die Logs erneut, um sicherzustellen, dass die Fehler behoben sind und die Anwendung korrekt funktioniert.\nIch würde gerne aus meinen resource ordner die Dateien teltonikaDongleDataDumby.txt und teltonikaIdAndName.txt in mein Dockerfile kopieren. Ich habe es versucht, aber es funktioniert nicht. Hier ist mein Dockerfile:\nFROM maven:3.9.8-eclipse-temurin-22-jammy AS build\nWORKDIR /service\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY ./src ./src\nRUN mvn clean install -Dmaven.test.skip=true\n\nFROM eclipse-temurin:22-jre-alpine\nWORKDIR /service\nCOPY --from=build /service/target/fmc003_rest-api-0.0.1-SNAPSHOT.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\nEXPOSE 8080\nUm sicherzustellen, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` aus dem `src/main/resources` Verzeichnis in dein Docker-Image kopiert werden, kannst du die Dateien explizit in deinem Dockerfile kopieren. Hier ist eine angepasste Version deines Dockerfiles, die dies berücksichtigt:\n\n```Dockerfile\n# Build stage\nFROM maven:3.9.8-eclipse-temurin-22-jammy AS build\nWORKDIR /service\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY ./src ./src\nRUN mvn clean install -Dmaven.test.skip=true\n\n# Run stage\nFROM eclipse-temurin:22-jre-alpine\nWORKDIR /service\nCOPY --from=build /service/target/fmc003_rest-api-0.0.1-SNAPSHOT.jar /app.jar\nCOPY --from=build /service/src/main/resources/teltonikaDongleDataDumby.txt /service/teltonikaDongleDataDumby.txt\nCOPY --from=build /service/src/main/resources/teltonikaIdAndName.txt /service/teltonikaIdAndName.txt\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\nEXPOSE 8080\n```\n\n### Erklärung der Änderungen:\n\n1. **Build Stage**:\n   - Die Build-Stage bleibt unverändert. Hier wird das Maven-Image verwendet, um die Abhängigkeiten herunterzuladen und das Projekt zu bauen.\n\n2. **Run Stage**:\n   - In der Run-Stage wird das JAR-File aus der Build-Stage kopiert.\n   - Zusätzlich werden die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` aus dem `src/main/resources` Verzeichnis der Build-Stage in das `/service` Verzeichnis des finalen Images kopiert.\n\n### Zugriff auf die Dateien im Code:\n\nWenn du die Dateien im Code verwenden möchtest, kannst du sie direkt aus dem `/service` Verzeichnis laden. Hier ist ein Beispiel, wie du dies tun kannst:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class IoDongleByFile {\n\n    public void fetchDongleModel() {\n        try (Scanner scanner = new Scanner(new File(\"/service/teltonikaDongleDataDumby.txt\"))) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (FileNotFoundException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}\n```\n\nUnd für die andere Datei:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class IoWikiByFile {\n\n    public void fetchIdsAndNames() {\n        try (Scanner scanner = new Scanner(new File(\"/service/teltonikaIdAndName.txt\"))) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (FileNotFoundException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Zusammenfassung:\n\n1. **Passe dein Dockerfile an, um die Dateien explizit zu kopieren**.\n2. **Passe deinen Code an, um die Dateien aus dem `/service` Verzeichnis zu laden**.\n\nNachdem du diese Änderungen vorgenommen hast, baue und starte deine Anwendung erneut:\n\n```sh\ndocker-compose up --build\n```\n\nÜberprüfe die Logs erneut, um sicherzustellen, dass die Fehler behoben sind und die Anwendung korrekt funktioniert.\nIch möchte das es mit folgenden path funktioniert:\n        String filePath = \"src/main/resources/teltonikaDongleDataDumby.txt\";\n\nUm sicherzustellen, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Docker-Container unter dem Pfad `src/main/resources` verfügbar sind, kannst du sie explizit in das Verzeichnis kopieren, das du im Code verwendest. Hier ist eine angepasste Version deines Dockerfiles, die dies berücksichtigt:\n\n### Dockerfile\n\n```Dockerfile\n# Build stage\nFROM maven:3.9.8-eclipse-temurin-22-jammy AS build\nWORKDIR /service\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY ./src ./src\nRUN mvn clean install -Dmaven.test.skip=true\n\n# Run stage\nFROM eclipse-temurin:22-jre-alpine\nWORKDIR /service\nCOPY --from=build /service/target/fmc003_rest-api-0.0.1-SNAPSHOT.jar /app.jar\nCOPY --from=build /service/src/main/resources/teltonikaDongleDataDumby.txt /service/src/main/resources/teltonikaDongleDataDumby.txt\nCOPY --from=build /service/src/main/resources/teltonikaIdAndName.txt /service/src/main/resources/teltonikaIdAndName.txt\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\nEXPOSE 8080\n```\n\n### Erklärung der Änderungen:\n\n1. **Build Stage**:\n   - Die Build-Stage bleibt unverändert. Hier wird das Maven-Image verwendet, um die Abhängigkeiten herunterzuladen und das Projekt zu bauen.\n\n2. **Run Stage**:\n   - In der Run-Stage wird das JAR-File aus der Build-Stage kopiert.\n   - Zusätzlich werden die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` aus dem `src/main/resources` Verzeichnis der Build-Stage in das gleiche Verzeichnis im finalen Image kopiert.\n\n### Zugriff auf die Dateien im Code:\n\nDa du den Pfad `src/main/resources/teltonikaDongleDataDumby.txt` verwenden möchtest, kannst du den Code so belassen, wie er ist:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class IoDongleByFile {\n\n    public void fetchDongleModel() {\n        String filePath = \"src/main/resources/teltonikaDongleDataDumby.txt\";\n        try (Scanner scanner = new Scanner(new File(filePath))) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (FileNotFoundException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}\n```\n\nUnd für die andere Datei:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class IoWikiByFile {\n\n    public void fetchIdsAndNames() {\n        String filePath = \"src/main/resources/teltonikaIdAndName.txt\";\n        try (Scanner scanner = new Scanner(new File(filePath))) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (FileNotFoundException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Zusammenfassung:\n\n1. **Passe dein Dockerfile an, um die Dateien explizit in das Verzeichnis `src/main/resources` zu kopieren**.\n2. **Verwende den Pfad `src/main/resources/teltonikaDongleDataDumby.txt` im Code**.\n\nNachdem du diese Änderungen vorgenommen hast, baue und starte deine Anwendung erneut:\n\n```sh\ndocker-compose up --build\n```\n\nÜberprüfe die Logs erneut, um sicherzustellen, dass die Fehler behoben sind und die Anwendung korrekt funktioniert.\nJetzt kriege ich folgende exception\nspringboot-restapi  | java.io.FileNotFoundException: src/main/resources/teltonikaDongleDataDumby.txt (No such file or directory)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open0(Native Method)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open(Unknown Source)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.<init>(Unknown Source)\nspringboot-restapi  | \tat java.base/java.util.Scanner.<init>(Unknown Source)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoDongleByFile.fetchDongleModel(IoDongleByFile.java:49)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoDongleByFile.<init>(IoDongleByFile.java:34)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)\nspringboot-restapi  | \tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1333)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | An error occurred.\nspringboot-restapi  | java.io.FileNotFoundException: src/main/resources/teltonikaIdAndName.txt (No such file or directory)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open0(Native Method)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.open(Unknown Source)\nspringboot-restapi  | \tat java.base/java.io.FileInputStream.<init>(Unknown Source)\nspringboot-restapi  | \tat java.base/java.util.Scanner.<init>(Unknown Source)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoWikiByFile.fetchIdsAndNames(IoWikiByFile.java:50)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.service.IoWikiByFile.<init>(IoWikiByFile.java:20)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)\nspringboot-restapi  | \tat org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:196)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1333)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1224)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1631)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1519)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)\nspringboot-restapi  | \tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1441)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\nspringboot-restapi  | \tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\nspringboot-restapi  | \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\nspringboot-restapi  | \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\nspringboot-restapi  | \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\nspringboot-restapi  | \tat com.xenya52.fmc003_rest_api.Fmc003RestApiApplication.main(Fmc003RestApiApplication.java:16)\nspringboot-restapi  | \tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)\nspringboot-restapi  | \tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)\nspringboot-restapi  | \tat org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)\nspringboot-restapi  | 2025-02-18T15:09:33.725Z  INFO 1 --- [service] [           main] o.s.v.b.OptionalValidatorFactoryBean     : Failed to set up a Bean Validation provider: jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.\nspringboot-restapi  | 2025-02-18T15:09:33.961Z  INFO 1 --- [service] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'\nspringboot-restapi  | 2025-02-18T15:09:33.972Z  INFO 1 --- [service] [           main] c.x.f.Fmc003RestApiApplication           : Started Fmc003RestApiApplication in 2.585 seconds (process running for 3.155)\nspringboot-restapi  | 2025-02-18T15:09:34.370Z  INFO 1 --- [service] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T15:09:34.370Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\nspringboot-restapi  | 2025-02-18T15:09:34.371Z  INFO 1 --- [service] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\nspringboot-restapi  | 2025-02-18T15:09:34.690Z  INFO 1 --- [service] [nio-8080-exec-5] o.springdoc.api.AbstractOpenApiResource  : Init duration for springdoc-openapi is: 174 ms\nspringboot-restapi  | Dongle List:\nmongo-express-1     | GET / 200 72.938 ms - 9258\nmongo-express-1     | GET /public/css/style.css 304 1.485 ms - -\nmongo-express-1     | GET /public/css/bootstrap-theme.min.css 304 1.761 ms - -\nmongo-express-1     | GET /public/index-56afe067afbbbde795be.min.js 304 1.637 ms - -\nmongo-express-1     | GET /public/vendor-93f5fc3ae20e0dfd68cb.min.js 304 3.339 ms - -\nmongo-express-1     | GET /public/css/bootstrap.min.css 200 3.422 ms - 121457\nmongo-express-1     | GET /public/img/mongo-express-logo.png 304 0.435 ms - -\nmongo-express-1     | GET /public/img/gears.gif 200 0.534 ms - 50281\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:42.772+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.2:34228\",\"uuid\":{\"uuid\":{\"$uuid\":\"b224e95e-8474-4d0f-a20f-c2c4b9bb2092\"}},\"connectionId\":6,\"connectionCount\":5}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:42.776+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn6\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.2:34228\",\"client\":\"conn6\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"nodejs\",\"version\":\"4.13.0\"},\"os\":{\"type\":\"Linux\",\"name\":\"linux\",\"architecture\":\"arm64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Node.js v18.20.3, LE (unified)|Node.js v18.20.3, LE (unified)\"}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:43.999+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":22943,   \"ctx\":\"listener\",\"msg\":\"Connection accepted\",\"attr\":{\"remote\":\"172.19.0.4:56974\",\"uuid\":{\"uuid\":{\"$uuid\":\"157344dd-9d48-4984-af5b-b2bf05787011\"}},\"connectionId\":7,\"connectionCount\":6}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:44.006+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":51800,   \"ctx\":\"conn7\",\"msg\":\"client metadata\",\"attr\":{\"remote\":\"172.19.0.4:56974\",\"client\":\"conn7\",\"negotiatedCompressors\":[],\"doc\":{\"driver\":{\"name\":\"mongo-java-driver|sync|spring-boot\",\"version\":\"5.2.1\"},\"os\":{\"type\":\"Linux\",\"name\":\"Linux\",\"architecture\":\"aarch64\",\"version\":\"6.8.0-39-generic\"},\"platform\":\"Java/Eclipse Adoptium/22.0.2+9\",\"env\":{\"container\":{\"runtime\":\"docker\"}}}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:44.007+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":6788604, \"ctx\":\"conn7\",\"msg\":\"Auth metrics report\",\"attr\":{\"metric\":\"acquireUser\",\"micros\":0}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:44.079+00:00\"},\"s\":\"I\",  \"c\":\"ACCESS\",   \"id\":5286306, \"ctx\":\"conn7\",\"msg\":\"Successfully authenticated\",\"attr\":{\"client\":\"172.19.0.4:56974\",\"isSpeculative\":true,\"isClusterMember\":false,\"mechanism\":\"SCRAM-SHA-256\",\"user\":\"youser\",\"db\":\"admin\",\"result\":0,\"metrics\":{\"conversation_duration\":{\"micros\":72596,\"summary\":{\"0\":{\"step\":1,\"step_total\":2,\"duration_micros\":58},\"1\":{\"step\":2,\"step_total\":2,\"duration_micros\":18}}}},\"extraInfo\":{}}}\nmongodb             | {\"t\":{\"$date\":\"2025-02-18T15:09:44.101+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":6788700, \"ctx\":\"conn7\",\"msg\":\"Received first command on ingress connection since session start or auth handshake\",\"attr\":{\"elapsedMillis\":22}}\n\n\nw Enable Watch\nDer Fehler `FileNotFoundException` tritt auf, weil der Pfad `src/main/resources/teltonikaDongleDataDumby.txt` im Docker-Container nicht existiert. In einem Docker-Container ist der relative Pfad `src/main/resources` nicht derselbe wie in deiner lokalen Entwicklungsumgebung.\n\nUm sicherzustellen, dass die Dateien korrekt gefunden werden, solltest du den Klassenpfad verwenden, um auf die Ressourcen zuzugreifen. Dies stellt sicher, dass die Dateien korrekt gefunden werden, unabhängig davon, ob die Anwendung lokal oder in einem Docker-Container ausgeführt wird.\n\n### Lösung: Verwende den Klassenpfad, um auf Ressourcen zuzugreifen\n\nHier ist ein Beispiel, wie du den Code anpassen kannst, um Dateien vom Klassenpfad zu laden:\n\n```java\nimport java.io.InputStream;\nimport java.util.Scanner;\n\npublic class IoDongleByFile {\n\n    public void fetchDongleModel() {\n        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"teltonikaDongleDataDumby.txt\");\n             Scanner scanner = new Scanner(inputStream)) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```\n\nUnd für die andere Datei:\n\n```java\nimport java.io.InputStream;\nimport java.util.Scanner;\n\npublic class IoWikiByFile {\n\n    public void fetchIdsAndNames() {\n        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"teltonikaIdAndName.txt\");\n             Scanner scanner = new Scanner(inputStream)) {\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Dockerfile überprüfen\n\nStelle sicher, dass dein Dockerfile korrekt ist und die Anwendung baut und startet. Hier ist ein Beispiel für ein Dockerfile:\n\n```Dockerfile\n# Build stage\nFROM maven:3.9.8-eclipse-temurin-22-jammy AS build\nWORKDIR /service\nCOPY pom.xml .\nRUN mvn dependency:go-offline\nCOPY ./src ./src\nRUN mvn clean install -Dmaven.test.skip=true\n\n# Run stage\nFROM eclipse-temurin:22-jre-alpine\nWORKDIR /service\nCOPY --from=build /service/target/fmc003_rest-api-0.0.1-SNAPSHOT.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\nEXPOSE 8080\n```\n\n### Zusammenfassung\n\n1. **Passe den Code an, um Dateien vom Klassenpfad zu laden**.\n2. **Stelle sicher, dass die Dateien `teltonikaDongleDataDumby.txt` und `teltonikaIdAndName.txt` im Verzeichnis `src/main/resources` vorhanden sind**.\n3. **Überprüfe dein Dockerfile, um sicherzustellen, dass die Anwendung korrekt gebaut und gestartet wird**.\n\nNachdem du diese Änderungen vorgenommen hast, baue und starte deine Anwendung erneut:\n\n```sh\ndocker-compose up --build\n```\n\nÜberprüfe die Logs erneut, um sicherzustellen, dass die Fehler behoben sind und die Anwendung korrekt funktioniert.\n/Users/lucyhuhn/Documents/Development/java/fmc003_rest-api/src/main/resources/teltonikaIdAndName.txt\n/Users/lucyhuhn/Documents/Development/java/fmc003_rest-api/src/main/resources/teltonikaDongleDataDumby.txt","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3293}}},{"id":{"replica_id":0,"value":22},"start":125,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3294}}},{"id":{"replica_id":0,"value":23},"start":3153,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3295}}},{"id":{"replica_id":0,"value":115},"start":3293,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3296}}},{"id":{"replica_id":0,"value":116},"start":6085,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3297}}},{"id":{"replica_id":0,"value":193},"start":7209,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3298}}},{"id":{"replica_id":0,"value":194},"start":10841,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3299}}},{"id":{"replica_id":0,"value":343},"start":10899,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3300}}},{"id":{"replica_id":0,"value":344},"start":14678,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3301}}},{"id":{"replica_id":0,"value":1066},"start":15388,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3302}}},{"id":{"replica_id":0,"value":1067},"start":20567,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3303}}},{"id":{"replica_id":0,"value":1421},"start":47795,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3304}}},{"id":{"replica_id":0,"value":1422},"start":51038,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3305}}},{"id":{"replica_id":0,"value":1710},"start":107173,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3306}}},{"id":{"replica_id":0,"value":1711},"start":110407,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3307}}},{"id":{"replica_id":0,"value":2043},"start":111178,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3308}}},{"id":{"replica_id":0,"value":2044},"start":114237,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3309}}},{"id":{"replica_id":0,"value":2454},"start":114811,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3310}}},{"id":{"replica_id":0,"value":2455},"start":117966,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3311}}},{"id":{"replica_id":0,"value":2742},"start":118096,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3312}}},{"id":{"replica_id":0,"value":2743},"start":121418,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3313}}},{"id":{"replica_id":0,"value":3060},"start":139294,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":3314}}},{"id":{"replica_id":0,"value":3061},"start":142368,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":3315}}}],"summary":"MongoDB Write Issue with Docker","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}